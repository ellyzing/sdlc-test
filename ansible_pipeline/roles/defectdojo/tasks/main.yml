---

- name: Build Dojo
  command: "{{ dojo_path }}/dc-build.sh"
  args:
    chdir: "{{ dojo_path }}"
  register: build_result
  ignore_errors: true
  changed_when: build_result.stdout != ""
  failed_when: build_result.rc != 0

- name: Start Dojo
  command: "{{ dojo_path }}/dc-up-d.sh"
  args:
    chdir: "{{ dojo_path }}"
  register: start_result
  ignore_errors: true
  changed_when: start_result.stdout != ""
  failed_when: start_result.rc != 0

- name: Display build result
  debug:
    msg: "{{ build_result.stdout }}"
  when: build_result.stdout is defined

- name: Display start result
  debug:
    msg: "{{ start_result.stdout }}"
  when: start_result.stdout is defined


- name: Check if DefectDojo is accessible
  uri:
    url: http://localhost:8080
    method: GET
    status_code: 200
    timeout: 60
  register: dojo_check
  until: dojo_check.status == 200
  retries: 10
  delay: 6
  ignore_errors: true

- name: Display result of DefectDojo accessibility check
  debug:
    msg: "DefectDojo is accessible: {{ dojo_check.status == 200 }}"


- name: Get Dojo pass from logs
  shell: docker compose logs initializer | grep 'Admin password:'
  args:
    chdir: "{{ dojo_path }}"
  register: dojo_log
  until: dojo_log.stdout_lines | length > 0
  retries: 5
  delay: 10

- name: Set Dojo password from logs
  set_fact:
    dojo_password: "{{ dojo_log.stdout_lines | first |  regex_replace('.*Admin password: ', '') }}"
  when: dojo_log.stdout_lines | length > 0 and dojo_password is not defined


- name: Display result of DefectDojo accessibility check
  debug:
    var: dojo_password 

- name: Get token from DefectDojo API
  uri:
    url: "{{ dojo_api_url }}/api-token-auth/"
    method: POST
    body_format: json
    headers:
      Content-Type: "application/json"
    body:
      username: "{{ dojo_username }}"
      password: "{{ dojo_password }}"
  register: api_response

- name: Extract token from response
  set_fact:
    dojo_token: "{{ api_response.json.token }}"
  when: api_response.status == 200

- name: Print DefectDojo API Token
  debug:
    var: dojo_token

- name: Check if the product already exists
  uri:
    url: "{{ dojo_api_url }}/products/?name={{ dojo_product_name }}"
    method: GET
    headers:
      Authorization: "Token {{ dojo_token }}"
  register: check_product_response
  ignore_errors: true

- name: Print DefectDojo products response
  debug:
    var: check_product_response.json

- name: Extract product id from dojo
  set_fact:
    product_id: "{{ check_product_response.json.results[0].id }}"
  when: check_product_response.json.count == 1



- name: Create DefectDojo Product
  uri:
    url: "{{ dojo_api_url }}/products/"
    method: POST
    headers:
      Authorization: "Token {{ dojo_token }}"
      Content-Type: application/json
      accept: application/json
    body: '{"name": "{{ dojo_product_name }}", "description": "string", "prod_type": 1}'
    body_format: json
  register: create_product_response
  when: check_product_response.json.count == 0
  ignore_errors: true
  changed_when: create_product_response.status == 201

- name: Debug create product response
  debug:
    var: create_product_response

- name: Extract product id from response
  set_fact:
    product_id: "{{ create_product_response.json.id }}"
  when: check_product_response.json.count == 0

- name: Print DefectDojo product id
  debug:
    var: product_id

- name: Check if the engagement already exists
  uri:
    url: "{{ dojo_api_url }}/engagements/?name={{ dojo_engagement_name }}"
    method: GET
    headers:
      Authorization: "Token {{ dojo_token }}"
  register: check_engagement_response
  ignore_errors: true

- name: Print DefectDojo engagement response
  debug:
    var: check_engagement_response.json

- name: Extract engagement id from dojo
  set_fact:
    engagement_id: "{{ check_engagement_response.json.results[0].id }}"
  when: check_engagement_response.json.count == 1


- name: Get current date
  set_fact:
    current_date: "{{ lookup('pipe', 'date +%Y-%m-%d') }}"

- name: Calculate target end date
  set_fact:
    target_end_date: "{{ current_date | regex_replace('^[0-9]{4}', (current_date.split('-')[0] | int + 1) | string ) }}"

- name: Print DefectDojo current date
  debug:
    var: current_date

- name: Print DefectDojo target end date
  debug:
    var: target_end_date

- name: Create DefectDojo Engagement
  uri:
    url: "{{ dojo_api_url }}/engagements/"
    method: POST
    headers:
      Authorization: "Token {{ dojo_token }}"
      Content-Type: application/json
      accept: application/json
    body: '{"name": "{{ dojo_engagement_name }}",  "product": {{ product_id | int }}, "description": "string", "target_start": "{{ current_date }}", "target_end": "{{ target_end_date }}"}'
    body_format: json
  register: create_engagement_response
  when: check_engagement_response.json.count == 0 
  ignore_errors: true
  changed_when: create_engagement_response.status == 201

- name: Debug create engagement response
  debug:
    var: create_engagement_response

- name: Extract engagement id from response
  set_fact:
    engagement_id: "{{ create_engagement_response.json.id }}"
  when: check_engagement_response.json.count == 0

- name: Print DefectDojo engagement id
  debug:
    var: engagement_id



- name: Import Semgrep scan to DefectDojo
  uri:
    url: "{{ dojo_api_url }}/import-scan/"
    method: POST
    headers:
      Authorization: "Token {{ dojo_token }}"
      accept: application/json
    body_format: form-multipart
    body:
      active: "true"
      verified: "true"
      scan_type: "Semgrep JSON Report"
      engagement: "{{ engagement_id }}"
      file: 
        filename: "{{ repo_path }}/semgrep-result.json" 
  register: import_semgrep_response
  ignore_errors: true
  changed_when: import_semgrep_response.status == 201
         

- name: Debug import semgrep response
  debug:
    var: import_semgrep_response



- name: Import Gitleaks scan to DefectDojo
  uri:
    url: "{{ dojo_api_url }}/import-scan/"
    method: POST
    headers:
      Authorization: "Token {{ dojo_token }}"
      accept: application/json
    body_format: form-multipart
    body:
      active: "true"
      verified: "true"
      scan_type: "Gitleaks Scan"
      engagement: "{{ engagement_id }}"
      file: 
        filename: "{{ repo_path }}/gl-result.json" 
  register: import_gitleaks_response
  ignore_errors: true
  changed_when: import_gitleaks_response.status == 201
         

- name: Debug import gitleaks response
  debug:
    var: import_gitleaks_response


- name: Import DeepSecrets scan to DefectDojo
  uri:
    url: "{{ dojo_api_url }}/import-scan/"
    method: POST
    headers:
      Authorization: "Token {{ dojo_token }}"
      accept: application/json
    body_format: form-multipart
    body:
      active: "true"
      verified: "true"
      scan_type: "Detect-secrets Scan"
      engagement: "{{ engagement_id }}"
      file: 
        filename: "{{ repo_path }}/ds-result.json" 
  register: import_deepsecrets_response
  ignore_errors: true
  changed_when: import_deepsecrets_response.status == 201
         

- name: Debug import deepsecrets response
  debug:
    var: import_deepsecrets_response